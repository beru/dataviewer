// This file was generated by WTL Dialog wizard 
// SettingDialog_2D.cpp : Implementation of CSettingDialog_2D

#include "stdafx.h"
#include "SettingDialog_2D.h"

#include "DataViewerCommon.h"
#include "ColorFormat.h"

#include "TwoWayMap.h"
#include "converter.h"
#include "arrayutil.h"

#include "Setting.h"

struct ColorFormatTypeMapper : public TwoWayMap<CString, DataSetting2D::ColorFormatType>
{
	ColorFormatTypeMapper()
	{
		map(CString("B5G6R5"),		DataSetting2D::ColorFormatType_B5G6R5);
		map(CString("B8G8R8"),		DataSetting2D::ColorFormatType_B8G8R8);
		map(CString("B8G8R8A8"),	DataSetting2D::ColorFormatType_B8G8R8A8);
//		map(CString("16F"),			DataSetting2D::ColorFormatType_16F);
		map(CString("32F"),			DataSetting2D::ColorFormatType_32F);
		map(CString("64F"),			DataSetting2D::ColorFormatType_64F);
		map(CString("1"),			DataSetting2D::ColorFormatType_1);
		map(CString("8"),			DataSetting2D::ColorFormatType_8);
		map(CString("16"),			DataSetting2D::ColorFormatType_16);
		map(CString("32"),			DataSetting2D::ColorFormatType_32);
	}
};

ColorFormatTypeMapper colorFormatTypeMapper;

CSettingDialog_2D::CSettingDialog_2D()
{
}

CSettingDialog_2D::~CSettingDialog_2D()
{
}

BOOL CSettingDialog_2D::PreTranslateMessage(MSG* pMsg)
{
	return IsDialogMessage(pMsg);
}

LRESULT CSettingDialog_2D::OnInitDialog(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL& bHandled)
{
	DoDataExchange();
	
	for (int i=DataSetting2D::ColorFormatType_Begin; i<=DataSetting2D::ColorFormatType_End; ++i) {
		m_wndCmbColorFormat.AddString(colorFormatTypeMapper[(DataSetting2D::ColorFormatType)i]);
	}
	
	m_wndRadAddressedLineFirst.Click();
	
	return 1;  // Let the system set the focus
}

LRESULT CSettingDialog_2D::OnClickedOK(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL& bHandled)
{
//	DoDataExchange(TRUE);
//	EndDialog(wID);
	return 0;
}

LRESULT CSettingDialog_2D::OnClickedCancel(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL& bHandled)
{
//	EndDialog(wID);
	return 0;
}

void CSettingDialog_2D::RetrieveSetting(boost::shared_ptr<IDataSetting>& pSetting)
{
	DataSetting2D* ps = new DataSetting2D;
	pSetting = boost::shared_ptr<DataSetting2D>(ps);

	CString str;
	m_wndEdtWidth.GetWindowText(ps->widthFormula, Count(ps->widthFormula));
	m_wndEdtHeight.GetWindowText(ps->heightFormula, Count(ps->heightFormula));
	if (IsDlgButtonChecked(IDC_RAD_ADDRESSEDLINE_FIRST) == BST_CHECKED) {
		ps->addressedLine = DataSetting2D::AddressedLine_First;
	}else if (IsDlgButtonChecked(IDC_RAD_ADDRESSEDLINE_LAST) == BST_CHECKED) {
		ps->addressedLine = DataSetting2D::AddressedLine_Last;
	}
	m_wndEdtLineOffset.GetWindowText(ps->lineOffsetFormula, Count(ps->lineOffsetFormula));
	m_wndCmbColorFormat.GetLBText(m_wndCmbColorFormat.GetCurSel(), str);
	ps->colorFormat = colorFormatTypeMapper[str];
}

void CSettingDialog_2D::SetSetting(const DataSetting2D& setting)
{
	CString str;
	m_wndEdtWidth.SetWindowTextW(setting.widthFormula);
	m_wndEdtHeight.SetWindowTextW(setting.heightFormula);
	switch (setting.addressedLine) {
	case DataSetting2D::AddressedLine_First:
		CheckDlgButton(IDC_RAD_ADDRESSEDLINE_FIRST, BST_CHECKED);
		CheckDlgButton(IDC_RAD_ADDRESSEDLINE_LAST, BST_UNCHECKED);
		break;
	case DataSetting2D::AddressedLine_Last:
		CheckDlgButton(IDC_RAD_ADDRESSEDLINE_FIRST, BST_UNCHECKED);
		CheckDlgButton(IDC_RAD_ADDRESSEDLINE_LAST, BST_CHECKED);
		break;
	}
	m_wndEdtLineOffset.SetWindowTextW(setting.lineOffsetFormula);
	m_wndCmbColorFormat.SelectString(-1, colorFormatTypeMapper[setting.colorFormat]);
}

